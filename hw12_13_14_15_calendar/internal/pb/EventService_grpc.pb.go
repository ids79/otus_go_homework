// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: EventService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventsApi_Create_FullMethodName      = "/event.EventsApi/Create"
	EventsApi_Update_FullMethodName      = "/event.EventsApi/Update"
	EventsApi_Delete_FullMethodName      = "/event.EventsApi/Delete"
	EventsApi_ListOnDay_FullMethodName   = "/event.EventsApi/ListOnDay"
	EventsApi_ListOnWeek_FullMethodName  = "/event.EventsApi/ListOnWeek"
	EventsApi_ListOnMonth_FullMethodName = "/event.EventsApi/ListOnMonth"
)

// EventsApiClient is the client API for EventsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsApiClient interface {
	Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Responce, error)
	Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Responce, error)
	Delete(ctx context.Context, in *RequestUuid, opts ...grpc.CallOption) (*Responce, error)
	ListOnDay(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error)
	ListOnWeek(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error)
	ListOnMonth(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error)
}

type eventsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsApiClient(cc grpc.ClientConnInterface) EventsApiClient {
	return &eventsApiClient{cc}
}

func (c *eventsApiClient) Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, EventsApi_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsApiClient) Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, EventsApi_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsApiClient) Delete(ctx context.Context, in *RequestUuid, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, EventsApi_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsApiClient) ListOnDay(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, EventsApi_ListOnDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsApiClient) ListOnWeek(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, EventsApi_ListOnWeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsApiClient) ListOnMonth(ctx context.Context, in *RequestDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, EventsApi_ListOnMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsApiServer is the server API for EventsApi service.
// All implementations must embed UnimplementedEventsApiServer
// for forward compatibility
type EventsApiServer interface {
	Create(context.Context, *Event) (*Responce, error)
	Update(context.Context, *Event) (*Responce, error)
	Delete(context.Context, *RequestUuid) (*Responce, error)
	ListOnDay(context.Context, *RequestDate) (*Events, error)
	ListOnWeek(context.Context, *RequestDate) (*Events, error)
	ListOnMonth(context.Context, *RequestDate) (*Events, error)
	mustEmbedUnimplementedEventsApiServer()
}

// UnimplementedEventsApiServer must be embedded to have forward compatible implementations.
type UnimplementedEventsApiServer struct {
}

func (UnimplementedEventsApiServer) Create(context.Context, *Event) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEventsApiServer) Update(context.Context, *Event) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEventsApiServer) Delete(context.Context, *RequestUuid) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEventsApiServer) ListOnDay(context.Context, *RequestDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnDay not implemented")
}
func (UnimplementedEventsApiServer) ListOnWeek(context.Context, *RequestDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnWeek not implemented")
}
func (UnimplementedEventsApiServer) ListOnMonth(context.Context, *RequestDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnMonth not implemented")
}
func (UnimplementedEventsApiServer) mustEmbedUnimplementedEventsApiServer() {}

// UnsafeEventsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsApiServer will
// result in compilation errors.
type UnsafeEventsApiServer interface {
	mustEmbedUnimplementedEventsApiServer()
}

func RegisterEventsApiServer(s grpc.ServiceRegistrar, srv EventsApiServer) {
	s.RegisterService(&EventsApi_ServiceDesc, srv)
}

func _EventsApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).Create(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).Update(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).Delete(ctx, req.(*RequestUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsApi_ListOnDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).ListOnDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_ListOnDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).ListOnDay(ctx, req.(*RequestDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsApi_ListOnWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).ListOnWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_ListOnWeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).ListOnWeek(ctx, req.(*RequestDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsApi_ListOnMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsApiServer).ListOnMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsApi_ListOnMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsApiServer).ListOnMonth(ctx, req.(*RequestDate))
	}
	return interceptor(ctx, in, info, handler)
}

// EventsApi_ServiceDesc is the grpc.ServiceDesc for EventsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventsApi",
	HandlerType: (*EventsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EventsApi_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EventsApi_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EventsApi_Delete_Handler,
		},
		{
			MethodName: "ListOnDay",
			Handler:    _EventsApi_ListOnDay_Handler,
		},
		{
			MethodName: "ListOnWeek",
			Handler:    _EventsApi_ListOnWeek_Handler,
		},
		{
			MethodName: "ListOnMonth",
			Handler:    _EventsApi_ListOnMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventService.proto",
}
