// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	typesevents "github.com/ids79/otus_go_homework/hw12_13_14_15_calendar/internal/storage/types-events"

	uuid "github.com/satori/go.uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, ev
func (_m *Storage) Create(ctx context.Context, ev typesevents.Event) (uuid.UUID, error) {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, typesevents.Event) (uuid.UUID, error)); ok {
		return rf(ctx, ev)
	}
	if rf, ok := ret.Get(0).(func(context.Context, typesevents.Event) uuid.UUID); ok {
		r0 = rf(ctx, ev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, typesevents.Event) error); ok {
		r1 = rf(ctx, ev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, u
func (_m *Storage) Delete(ctx context.Context, u uuid.UUID) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOnDay provides a mock function with given fields: ctx, _a1
func (_m *Storage) ListOnDay(ctx context.Context, _a1 time.Time) []typesevents.Event {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOnDay")
	}

	var r0 []typesevents.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []typesevents.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]typesevents.Event)
		}
	}

	return r0
}

// ListOnMonth provides a mock function with given fields: ctx, _a1
func (_m *Storage) ListOnMonth(ctx context.Context, _a1 time.Time) []typesevents.Event {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOnMonth")
	}

	var r0 []typesevents.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []typesevents.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]typesevents.Event)
		}
	}

	return r0
}

// ListOnWeek provides a mock function with given fields: ctx, _a1
func (_m *Storage) ListOnWeek(ctx context.Context, _a1 time.Time) []typesevents.Event {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOnWeek")
	}

	var r0 []typesevents.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []typesevents.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]typesevents.Event)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, u, ev
func (_m *Storage) Update(ctx context.Context, u uuid.UUID, ev typesevents.Event) error {
	ret := _m.Called(ctx, u, ev)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, typesevents.Event) error); ok {
		r0 = rf(ctx, u, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
